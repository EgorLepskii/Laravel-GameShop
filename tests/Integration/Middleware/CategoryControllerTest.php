<?php

namespace Tests\Integration\Middleware;

use App\Http\Middleware\VerifyCsrfToken;
use App\Models\Category;
use App\Models\FrontCategory;
use App\Models\FrontProduct;
use App\Models\FrontUser;
use App\Models\User;
use Faker\Factory;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class CategoryControllerTest extends TestCase
{
    protected User $user;

    protected User $admin;

    protected Category $category;


    protected function setUp(): void
    {
        parent::setUp();
        Factory::create();
        $this->withoutMiddleware(VerifyCsrfToken::class);

        DB::beginTransaction();


        $this->user = FrontUser::factory()->create(['isAdmin' => false]) ?? new FrontUser();

        $this->admin = FrontUser::factory()->create(['isAdmin' => true]) ?? new FrontUser();

        $this->category = FrontCategory::factory()->create() ?? new FrontCategory();
    }

    public function test_edit_not_admin_access(): void
    {
        auth()->login($this->user);
        $this->get(route('category.edit', ['category' => $this->category->getAttribute('id')]))
            ->assertForbidden();
    }

    public function test_store_not_admin_access(): void
    {
        auth()->login($this->user);
        $this->post(route('category.store', ['category' => $this->category->getAttribute('id')]))
            ->assertForbidden();
    }

    public function test_update_not_admin_access(): void
    {
        auth()->login($this->user);
        $this->post(route('category.update', ['category' => $this->category->getAttribute('id')]))
            ->assertForbidden();
    }

    public function test_delete_not_admin_access(): void
    {
        auth()->login($this->user);
        $this->post(route('category.destroy', ['category' => $this->category->getAttribute('id')]))
            ->assertForbidden();
    }

    public function test_edit_admin_access(): void
    {
        auth()->login($this->admin);
        $status = $this->get(route('category.edit', ['category' => $this->category->getAttribute('id')]))
            ->status();

        $this->assertTrue($status != 403);
    }

    public function test_store_admin_access(): void
    {
        auth()->login($this->admin);
        $status = $this->post(route('category.store', ['category' => $this->category->getAttribute('id')]))
            ->status();

        $this->assertTrue($status != 403);
    }

    public function test_update_admin_access(): void
    {
        auth()->login($this->admin);
        $status = $this->post(route('category.update', ['category' => $this->category->getAttribute('id')]))
            ->status();

        $this->assertTrue($status != 403);
    }

    public function test_delete_admin_access(): void
    {
        auth()->login($this->admin);
        $status = $this->post(route('category.destroy', ['category' => $this->category->getAttribute('id')]))
            ->status();

        $this->assertTrue($status != 403);
    }


    protected function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
