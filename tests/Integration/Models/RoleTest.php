<?php

namespace Tests\Integration\Models;

use App\Http\Middleware\VerifyCsrfToken;
use App\Models\FrontCategory;
use App\Models\Order;
use App\Models\OrderRecipientRole;
use App\Models\FrontProduct;
use App\Models\Recipient;
use App\Models\Role;
use App\Models\FrontUser;
use Faker\Factory;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class  RoleTest extends TestCase
{
    /**
     * @var int
     */
    public const ORDERS_COUNT_FOR_TESTS = 10;

    /**
     * @var int
     */
    public const RECIPIENTS_COUNT_FOR_TESTS = 10;

    protected Role $role;

    protected Recipient $recipient;

    protected $faker;


    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        DB::beginTransaction();
        $this->faker = Factory::create();

        $this->role = new Role(
            [
                'name' => $this->faker->text(self::STR_LEN_FOR_TESTS),
                'type' => OrderRecipientRole::getType()
            ]
        );
        $this->role->save();

    }

    /**
     * Assert, that emails of saved recipients with current role id will be received
     * from recipients method
     */
    public function test_recipients(): void
    {
        $emails = [];

        for ($i = 0; $i < self::RECIPIENTS_COUNT_FOR_TESTS; ++$i) {
            $recipient = self::createRecipient($this->role->getAttribute('id'));
            $recipient->save();
            $emails[] = $recipient->getAttribute('email');
        }

        foreach ($this->role->recipients()->get() as $recipient) {
            $this->assertTrue(in_array($recipient->getAttribute('email'), $emails));
        }
    }


    protected function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
