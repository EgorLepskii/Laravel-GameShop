<?php

namespace Tests\Integration\Controllers;

use App\Http\Middleware\VerifyCsrfToken;
use App\Models\FrontCategory;
use App\Models\Order;
use App\Models\FrontProduct;
use App\Models\FrontUser;
use App\Models\User;
use Faker\Factory;
use Illuminate\Support\Facades\DB;
use phpDocumentor\Reflection\DocBlock\Tags\Author;

class OrderStoreControllerTest extends \Tests\TestCase
{
    protected $faker;

    protected User $user;

    protected function setUp(): void
    {
        parent::setUp();
        $this->faker = Factory::create();
        DB::beginTransaction();
        $this->user = FrontUser::factory()->create(['isAdmin' => false]) ?? new FrontUser();
    }

    /**
     * Assert, that order will be saved in database
     */
    public function test_store(): void
    {
        $this->withoutMiddleware(VerifyCsrfToken::class);
        auth()->login($this->user);

        $product = FrontProduct::factory()->create();

        $this->post(
            route(
                'order.store', ['product' => $product->getAttribute('id')]
            ),
            ['productId' => $product->getAttribute('id')]
        );

        $this->assertEquals(
            Order::query()
                ->where('userId', '=', auth()->user()->getAuthIdentifier())
                ->where('productId', '=', $product->getAttribute('id'))
                ->first()
                ->getAttribute('productId'),
            $product->getAttribute('id')
        );
    }

    /**
     * Assert, that order with current user id and with product id, that already exist
     * will not be saved
     */
    public function test_store_if_exists(): void
    {
        $this->withoutMiddleware(VerifyCsrfToken::class);
        auth()->login($this->user);
        $category = FrontCategory::factory()->create() ?? new FrontCategory();

        $product = self::createProduct($category->getAttribute('id'));
        $product->save();

        (self::creatreOrder(auth()->user()->getAuthIdentifier(), $product->getAttribute('id')))->save();

        $this->post(
            route(
                'order.store', ['product' => $product->getAttribute('id')]
            ),
            ['productId' => $product->getAttribute('id')]
        )->assertSessionHasErrors(['productId']);

    }

    /**
     * Assert, that order with current user id and with product id, that already exist,
     * but in entry with another user id will be saved
     */
    public function test_store_if_product_id_exists(): void
    {
        $this->withoutMiddleware(VerifyCsrfToken::class);
        auth()->login($this->user);

        $category = FrontCategory::factory()->create() ?? new FrontCategory();

        $product = self::createProduct($category->getAttribute('id'));
        $product->save();

        (self::creatreOrder(auth()->user()->getAuthIdentifier(), $product->getAttribute('id')))->save();

        $this->user = FrontUser::factory()->create(['isAdmin' => false]) ?? new FrontUser();

        auth()->login($this->user);

        $this->post(
            route(
                'order.store', ['product' => $product->getAttribute('id')]
            ),
            ['productId' => $product->getAttribute('id')]
        );

        $this->assertEquals(
            Order::query()
                ->where('userId', '=', auth()->user()->getAuthIdentifier())
                ->where('productId', '=', $product->getAttribute('id'))
                ->first()
                ->getAttribute('productId'),
            $product->getAttribute('id')
        );

    }


    protected function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
