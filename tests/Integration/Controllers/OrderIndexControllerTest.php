<?php

namespace Tests\Integration\Controllers;

use App\Http\Controllers\OrderController;
use App\Http\Middleware\VerifyCsrfToken;
use App\Models\FrontCategory;
use App\Models\Order;
use App\Models\FrontProduct;
use App\Models\FrontUser;
use App\Models\User;
use Faker\Factory;
use Illuminate\Support\Facades\DB;
use phpDocumentor\Reflection\DocBlock\Tags\Author;
use Symfony\Component\DomCrawler\Crawler;

class OrderIndexControllerTest extends \Tests\TestCase
{
    protected $faker;

    protected User $user;

    protected function setUp(): void
    {
        parent::setUp();
        $this->faker = Factory::create();
        DB::beginTransaction();
        $this->user = FrontUser::factory()->create(['isAdmin' => false]) ?? new FrontUser();
    }

    public function createOrders(int $count): void
    {
        for ($i = 0; $i < $count; ++$i) {
            $product = FrontProduct::factory()->create();
            (self::creatreOrder($this->user->getAuthIdentifier(), $product->getAttribute('id')))->save();
        }
    }

    /**
     * Assert, that count of orders, contains in view data will not be more, than maximum allowed count
     */
    public function test_max_show_count(): void
    {
        auth()->login($this->user);
        $this->createOrders(Order::MAX_ORDERS_SHOW_COUNT + 1);
        $response = $this->get(route('order.index'))->getContent();

        $crawler = new Crawler($response);
        $this->assertEquals
        (
            Order::MAX_ORDERS_SHOW_COUNT,
            $crawler->filter('.cart-product-list__item')->count()
        );
    }


    protected function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
