<?php

namespace Tests\Integration\Controllers;

use App\Models\FrontCategory;
use App\Models\OrderRecipientRole;
use App\Models\FrontProduct;
use App\Models\Role;
use Faker\Factory;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;

class RoleStoreControllerTest extends \Tests\TestCase
{
    use WithoutMiddleware;

    protected $faker;

    protected int $roleType = 0;

    protected function setUp(): void
    {
        parent::setUp();
        $this->faker = Factory::create();
        DB::beginTransaction();


    }

    public function test_correct_store(): void
    {
        $roleName = $this->faker->text(Role::MAX_NAME_LENGTH);
        $this->post(
            route('role.store'),
            [
                'name' => $roleName,
                'type' => OrderRecipientRole::getType()
            ]
        );
        $this->assertNotEmpty(Role::query()->where('name', '=', $roleName)->first());
    }

    public function test_if_exists(): void
    {
        $roleName = $this->faker->text(Role::MAX_NAME_LENGTH);
        (new Role(['name' => $roleName, 'type' => OrderRecipientRole::getType()]))->save();

        $this->post(route('role.store'), ['name' => $roleName])->assertSessionHasErrors('name');
    }

    /**
     * @dataProvider incorrectDataProvider
     * @param        array<string, string>|array<string, int> $data
     * @param        string[]                                 $expectedErrors
     */
    public function test_incorrect_data(array $data, array $expectedErrors): void
    {
        $this->post(route('role.store'), $data)->assertSessionHasErrors();
    }

    /**
     * @return array{name_over_length: array{name: string, type: int}[]|string[][], empty_name: array{name: string, type: int}[]|string[][]}
     */
    public function incorrectDataProvider(): array
    {
        $faker = Factory::create();

        return [
            'name_over_length' => [
                [
                    'name' => $faker->lexify(str_repeat('?', Role::MAX_NAME_LENGTH + 1)),
                    'type' => 0
                ],
                [
                    'name'
                ]
            ],
            'empty_name' => [
                [
                    'name' => '',
                    'type' => 0
                ],
                [
                    'name'
                ]
            ],
        ];
    }


    protected function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
