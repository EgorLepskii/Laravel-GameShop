<?php

namespace Tests\Integration\Controllers;

use App\Http\Middleware\VerifyCsrfToken;
use App\Models\FrontCategory;
use App\Models\FrontProduct;
use App\Models\FrontUser;
use App\Models\User;
use Dflydev\DotAccessData\Data;
use Faker\Factory;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use OpenApi\Examples\Petstore30\Models\Category;

class CategoryUpdateControllerTest extends \Tests\TestCase
{
    protected $faker;

    protected User $user;

    protected \App\Models\Category $category;

    protected function setUp(): void
    {
        parent::setUp();
        $this->withoutMiddleware(VerifyCsrfToken::class);
        $this->faker = Factory::create();
        DB::beginTransaction();
        $this->category = FrontCategory::factory()->create() ?? new FrontCategory();

        $this->user = FrontUser::factory()->create(['isAdmin' => true]) ?? new FrontUser();

        auth()->login($this->user);
    }

    /**
     * @dataProvider updateIncorrectDataProvider
     * @param        array<string, string> $data
     * @param        string[]              $expectedErrors
     */
    public function test_update_with_incorrect_data(array $data, array $expectedErrors): void
    {
        $this->post(
            route(
                'category.update',
                ['category' => $this->category->getAttribute('id')]
            ), $data
        )->assertSessionHasErrors($expectedErrors);
    }

    /**
     * @return array{empty_fields: array{name: string}[]|string[][], name_over_length: array{name: string}[]|string[][]}
     */
    public function updateIncorrectDataProvider(): array
    {
        $faker = Factory::create();
        return [
            'empty_fields' => [
                [
                    'name' => '',
                ],
                [
                    'name'
                ]
            ],

            'name_over_length' => [
                [
                    'name' => $faker->lexify(str_repeat('?', FrontCategory::MAX_NAME_LENGTH + 1))
                ],
                [
                    'name'
                ]
            ],

        ];
    }


    public function test_if_entry_already_exists(): void
    {
        $name = $this->faker->text(self::STR_LEN_FOR_TESTS);
        (new FrontCategory(['name' => $name]))->save();

        $this->post(
            route('category.update', ['category' => $this->category->getAttribute('id')]),
            ['name' => $name]
        )->assertSessionHasErrors('name');

    }

    public function test_with_correct_data(): void
    {
        $this->withoutMiddleware(VerifyCsrfToken::class);

        $name = $this->faker->text(FrontCategory::MAX_NAME_LENGTH);

        $this->post(
            route('category.update', ['category' => $this->category->getAttribute('id')]),
            ['name' => $name]
        );

        $this->assertEquals(
            FrontCategory::query()->where('name', '=', $name)->first()->getAttribute('name'),
            $name
        );
    }

    protected function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
