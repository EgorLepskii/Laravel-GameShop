<?php

namespace Tests\Integration\Controllers;

use App\Http\Middleware\VerifyCsrfToken;
use App\Models\Category;
use App\Models\FrontCategory;
use App\Models\FrontProduct;
use App\Models\FrontUser;
use App\Models\User;
use App\Product;
use Faker\Factory;
use Illuminate\Support\Facades\DB;


class ProductDeleteControllerTest extends \Tests\TestCase
{
    protected $faker;

    protected \App\Models\Product $product;


    protected User $user;

    protected function setUp(): void
    {
        parent::setUp();
        $this->faker = Factory::create();
        DB::beginTransaction();

        $this->product = FrontProduct::factory()->create() ?? new FrontProduct();
        $this->user = FrontUser::factory()->create(['isAdmin' => true]) ?? new FrontUser();

    }

    /**
     * Assert, that product will be deleted from database after call destroy method
     */
    public function test_delete_if_exists(): void
    {
        auth()->login($this->user);
        $this->withoutMiddleware(VerifyCsrfToken::class);

        $this->post(
            route('product.destroy', ['product' => $this->product->getId()]), ['id' => $this->product->getId()]
        );

        $this->assertEmpty(FrontProduct::query()->where('id', '=', $this->product->getId())->first());
    }

    /**
     * Assert, there will be status 4040 after attempt to delete product with not existing id
     */
    public function test_delete_if_not_exists(): void
    {
        auth()->login($this->user);
        $this->withoutMiddleware(VerifyCsrfToken::class);

        $this->post(
            route('product.destroy', ['product' => -1]), ['id' => -1]
        )->assertNotFound();

    }


    protected function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
