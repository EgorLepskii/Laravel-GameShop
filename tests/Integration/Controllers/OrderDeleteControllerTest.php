<?php

namespace Tests\Integration\Controllers;

use App\Http\Controllers\OrderController;
use App\Http\Middleware\VerifyCsrfToken;
use App\Models\FrontCategory;
use App\Models\Order;
use App\Models\FrontProduct;
use App\Models\FrontUser;
use App\Models\User;
use Faker\Factory;
use Illuminate\Support\Facades\DB;
use phpDocumentor\Reflection\DocBlock\Tags\Author;

class OrderDeleteControllerTest extends \Tests\TestCase
{
    protected $faker;

    protected User $user;

    protected function setUp(): void
    {
        parent::setUp();
        $this->faker = Factory::create();
        DB::beginTransaction();
        $this->user = FrontUser::factory()->create(['isAdmin' => false]) ?? new FrontUser();
    }

    /**
     * Test correct delete
     */
    public function test_delete(): void
    {
        $this->withoutMiddleware(VerifyCsrfToken::class);
        auth()->login($this->user);

        $product = FrontProduct::factory()->create();

        $order = self::creatreOrder(auth()->user()->getAuthIdentifier(), $product->getAttribute('id'));
        $order->save();

        $this->post(
            route('order.destroy', ['order' => $order->getAttribute('id')]),
            ['orderId' => $order->getAttribute('id')]
        );

        $this->assertEmpty(
            Order::query()->where('id', '=', $order->getAttribute('id'))->first()
        );
    }


    /**
     * Assert, that user cannot delete order, which not belongs to him
     */
    public function test_delete_for_other_user(): void
    {
        $this->withoutMiddleware(VerifyCsrfToken::class);
        auth()->login($this->user);

        $product = FrontProduct::factory()->create();

        $order = self::creatreOrder($this->user->getAttribute('id'), $product->getAttribute('id'));
        $order->save();

        $testUser = FrontUser::factory()->create(['isAdmin' => false]) ?? new FrontUser();

        auth()->login($testUser);

        $this->post(route('order.destroy', ['order' => $order->getAttribute('id')]));

        $this->assertNotEmpty(
            Order::query()->where('id', '=', $order->getAttribute('id'))->first()
        );
    }


    protected function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
