<?php

namespace Tests\Integration\Controllers;

use App\Http\Controllers\HomeController;
use App\Models\FrontCategory;
use App\Models\FrontProduct;
use App\Product;
use Faker\Factory;
use Illuminate\Support\Facades\DB;
use Symfony\Component\DomCrawler\Crawler;

class HomeControllerTest extends \Tests\TestCase
{
    protected $faker;

    protected function setUp(): void
    {
        parent::setUp();
        $this->faker = Factory::create();
        DB::beginTransaction();
    }

    public function createProducts(int $count, FrontCategory $category): void
    {

        for ($i = 0; $i < $count; ++$i) {
            (new FrontProduct(
                [
                    'name' => $this->faker->name,
                    'categoryId' => $category->getAttribute('id'),
                    'imageSrc' => '',
                    'description' => $this->faker->text(self::STR_LEN_FOR_TESTS),
                    'price' => $this->faker->randomFloat()

                ]
            ))->save();
        }
    }


    /**
     * Assert, that max count of products, displayed in the page will be less or equal MAX_PRODUCT_COUNT
     */
    public function test_max_show_count(): void
    {
        $category = FrontCategory::factory()->create() ?? new FrontCategory();
        $category->save();

        $this->createProducts(FrontProduct::MAX_PRODUCT_COUNT + 1, $category);
        $response = $this->get(route('home.index'))->getContent();

        $crawler = new Crawler($response);
        $this->assertEquals(FrontProduct::MAX_PRODUCT_COUNT, $crawler->filter('.products-columns__item')->count());
    }

    /**
     * Assert, that max count of products, displayed in the page will be equal to count of products with
     * selected category
     */
    public function test_max_show_count_with_category_param(): void
    {
        $category = FrontCategory::factory()->create() ?? new FrontCategory();
        $category->save();
        $testProductsCount = 3;
        $this->createProducts($testProductsCount, $category);

        FrontProduct::factory()->create();

        $response = $this->get
        (
            route
            (
                'home.index',
                [
                    'category' => $category->getAttribute('id'),
                    'page' => 1
                ]
            )
        )->getContent();

        $crawler = new Crawler($response);

        $this->assertEquals
        (
            $testProductsCount,
            $crawler->filter('.products-columns__item')->count()
        );

    }

    /**
     * Assert, that first product, which index bigger, than max product count valuer will be on the
     * second page
     */
    public function test_max_show_count_with_page_param(): void
    {
        $category = FrontCategory::factory()->create() ?? new FrontCategory();
        $category->save();

        $testProductsCount = FrontProduct::MAX_PRODUCT_COUNT + 1;

        $this->createProducts($testProductsCount, $category);

        $response = $this->get
        (
            route
            (
                'home.index',
                [
                    'page' => 2,
                    'category' => $category->getAttribute('id')
                ]
            )
        )->getContent();

        $crawler = new Crawler($response);

        $this->assertEquals
        (
            1,
            $crawler->filter('.products-columns__item')->count()
        );

    }


    protected function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
