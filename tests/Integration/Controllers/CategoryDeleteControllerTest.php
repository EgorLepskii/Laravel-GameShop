<?php

namespace Tests\Integration\Controllers;

use App\Http\Middleware\VerifyCsrfToken;
use App\Models\Category;
use App\Models\FrontCategory;
use App\Models\FrontProduct;
use App\Models\FrontUser;
use App\Models\User;
use Faker\Factory;
use Illuminate\Support\Facades\DB;


class CategoryDeleteControllerTest extends \Tests\TestCase
{
    protected $faker;

    protected User $user;

    protected function setUp(): void
    {
        parent::setUp();
        $this->withoutMiddleware(VerifyCsrfToken::class);
        $this->faker = Factory::create();
        DB::beginTransaction();

        $this->user = FrontUser::factory()->create(['isAdmin' => true]) ?? new FrontUser();
        auth()->login($this->user);
    }

    /**
     * Assert, that category and products with id of this category will be deleted from database
     */
    public function test_delete_if_exists(): void
    {
        $productName = $this->faker->text(FrontProduct::MAX_NAME_LENGTH);
        $product = FrontProduct::factory()->create(['name' => $productName]);
        $categoryId = $product->getAttribute('categoryId');

        $this->post(
            route(
                'category.destroy',
                ['category' => $categoryId]
            ),
            ['id' => $categoryId]
        );

        $this->assertEmpty(
            FrontCategory::query()
                ->where('id', '=', $categoryId)
                ->first()
        );

        $this->assertEmpty(FrontProduct::query()->where('name', '=', $productName)->first());
    }


    /**
     * Assert, there will be status 404 when trying to delete entry, which not exists
     */
    public function test_delete_if_not_exists(): void
    {
        $this->post(
            route('category.destroy', ['category' => -1]),
            ['id' => -1]
        )->assertStatus(404);


    }

    protected function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
