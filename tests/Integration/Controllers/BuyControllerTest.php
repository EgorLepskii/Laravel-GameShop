<?php

namespace Tests\Integration\Controllers;

use App\Http\Middleware\VerifyCsrfToken;
use App\Models\Category;
use App\Models\FrontCategory;
use App\Models\Order;
use App\Models\FrontProduct;
use App\Models\FrontUser;
use App\Models\User;
use App\Product;
use Faker\Factory;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Support\Facades\DB;


class BuyControllerTest extends \Tests\TestCase
{
    /**
     * @var int
     */
    public const PRODUCTS_COUNT_FOR_TESTS = 10;

    private User $user;

    protected $faker;


    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        DB::beginTransaction();
        $this->user = FrontUser::factory()->create(['isAdmin' => false]) ?? new FrontUser();
    }

    /**
     * Assert, that information about order will be placed in queue database anb that
     * all user orders will be deleted
     */
    public function test_store(): void
    {
        $this->withoutMiddleware(VerifyCsrfToken::class);
        auth()->login($this->user);

        for ($i = 0; $i < self::PRODUCTS_COUNT_FOR_TESTS; ++$i) {
            $product = FrontProduct::factory()->create();
            $order = self::creatreOrder($this->user->getAttribute('id'), $product->getId());
            $order->save();
        }

        $this->post(route('buy.store'));

        $userId = $this->user->getAttribute('id');

        $dbData = DB::selectOne(sprintf('SELECT payload FROM jobs WHERE payload LIKE \'%%%s%%\'', $userId));

        //$this->assertNotEmpty($dbData);
        $this->assertEmpty($this->user->orders()->first());
    }

    /**
     * Testing, if user try to make order if his basket is empty
     */
    public function test_if_empty(): void
    {
        $this->withoutMiddleware(VerifyCsrfToken::class);
        auth()->login($this->user);

        $this->post(route('buy.store'))->assertSessionHasErrors(['products']);

    }

    protected function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown();
    }

}
