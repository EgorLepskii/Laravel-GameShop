<?php

namespace Tests\Unit\Services;

use App\Http\Middleware\VerifyCsrfToken;
use App\Models\FrontUser;
use App\Models\SocialAccount;
use App\Models\SocialNetworkType;
use App\Services\SocialNetworkAuthService;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class AuthServiceTest extends TestCase
{

    private \Laravel\Socialite\Contracts\User $socialNetworkUser;
    private SocialNetworkType $socialNetworkType;
    private SocialNetworkAuthService $socialNetworkAuthService;
    private SocialAccount $socialAccount;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->withoutMiddleware(VerifyCsrfToken::class);

        $this->socialNetworkUser = $this->createMock(\Laravel\Socialite\Contracts\User::class);
        $socialNetworkType = self::createSocialNetworkType();

        $this->socialNetworkAuthService = new SocialNetworkAuthService();
        DB::beginTransaction();

        $socialNetworkType->save();
        $this->socialNetworkType = $socialNetworkType;

    }


    /**
     * Assert, that if user email  will be empty and received SocialAccount
     * will consider email, user email will be set to this email
     * and email will be verified
     *
     * @return void
     */
    public function test_if_social_account_exists_and_user_email_is_empty()
    {
        $user = FrontUser::factory()->create(['isAdmin' => false, 'email' => null]);

        $socialNetworkTypeId = $this->socialNetworkType->getAttribute('id');

        $this->socialAccount = self::createSocialAccount(
            $socialNetworkTypeId,
            $user->getAttribute('id')
        );

        $this->socialAccount->save();

        $this->socialNetworkUser->method('getEmail')->willReturn($this->faker->email);
        $this->socialNetworkUser->method('getNickname')->willReturn($this->faker->name);

        $this->socialNetworkUser->method('getId')->willReturn(
            $this->socialAccount->getAttribute('socialNetworkUserId')
        );


        $this->socialNetworkAuthService->login($this->socialNetworkUser, $socialNetworkTypeId);

        $user = FrontUser::query()
            ->where('id', '=', $user->getAttribute('id'))
            ->first();

        $this->assertEquals($user->getAttribute('email'), $this->socialNetworkUser->getEmail());
        $this->assertNotEmpty($user->getAttribute('email_verified_at'));


    }

    /**
     * Assert, that if user email  will be not empty and received SocialAccount
     * will consider new email, user email will not be updated
     *
     * @return void
     */
    public function test_if_social_account_exists_and_user_email_is_not_empty()
    {
        $user = FrontUser::factory()->create(['isAdmin' => false]);


        $socialNetworkTypeId = $this->socialNetworkType->getAttribute('id');

        $socialAccount = self::createSocialAccount($socialNetworkTypeId, $user->getAttribute('id'));
        $socialAccount->save();


        $this->socialNetworkUser->method('getEmail')->willReturn($this->faker->email);
        $this->socialNetworkUser->method('getId')->willReturn(
            $socialAccount->getAttribute('socialNetworkUserId')
        );
        $this->socialNetworkUser->method('getNickname')->willReturn($this->faker->name);

        $this->socialNetworkAuthService->login($this->socialNetworkUser, $socialNetworkTypeId);

        $this->assertEquals(
            FrontUser::query()
                ->where('id', '=', $user->getAttribute('id'))
                ->first()
                ->getAttribute('email'),
            $user->getAttribute('email')
        );

    }

    /**
     * Assert, that if social account is not exists and received email is empty user with empty
     * email will be created and social account will be linked to him
     *
     * @return void
     */
    public function test_if_social_account_is_not_exists_and_email_is_empty()
    {
        $socialNetworkUserId = mt_rand(0, PHP_INT_MAX);

        $this->socialNetworkUser->method('getId')->willReturn(
            $socialNetworkUserId
        );

        $this->socialNetworkUser->method('getEmail')->willReturn("");
        $this->socialNetworkUser->method('getNickname')->willReturn($this->faker->name);

        $this->socialNetworkAuthService->login(
            $this->socialNetworkUser,
            $this->socialNetworkType->getAttribute('id')
        );

        $socialAccount = SocialAccount::query()
            ->where('socialNetworkUserId', '=', $socialNetworkUserId)
            ->first();

        $socialAccountUserId = $socialAccount->getAttribute('userId') ?? -1;
        $this->assertNotEmpty($socialAccount);

        $this->assertNotEmpty(FrontUser::query()->where('id', '=', $socialAccountUserId)->first());
    }

    /**
     * Assert, that if social account is not exists and user with received email is not exists
     * user with received email will be created and social account will be linked tio him and
     * email will be verified
     *
     * @return void
     */
    public function test_if_social_account_is_not_exists_and_user_with_received_email_is_not_exists()
    {
        $socialNetworkUserId = mt_rand(0, PHP_INT_MAX);
        $email = $this->faker->email;

        $this->socialNetworkUser->method('getId')->willReturn(
            $socialNetworkUserId
        );

        $this->socialNetworkUser->method('getEmail')->willReturn($email);
        $this->socialNetworkUser->method('getNickname')->willReturn($this->faker->name);


        $this->socialNetworkAuthService->login(
            $this->socialNetworkUser,
            $this->socialNetworkType->getAttribute('id')
        );

        $socialAccount = SocialAccount::query()
            ->where('socialNetworkUserId', '=', $socialNetworkUserId)
            ->first();


        $socialAccountUserId = $socialAccount->getAttribute('userId') ?? -1;
        $this->assertNotEmpty($socialAccount);

        $user = FrontUser::query()->where('id', '=', $socialAccountUserId)->first();
        $this->assertEquals($user->getAttribute('email'), $email);
        $this->assertNotEmpty($user->getAttribute('email_verified_at'));

    }

    /**
     * Assert, that if user with received email exists, social account with received email will be created and
     * will be linked to this user
     *
     * @return void
     */
    public function test_if_social_account_is_not_exists_and_user_with_received_email_exists()
    {
        $socialNetworkUserId = mt_rand(0, PHP_INT_MAX);

        $user = FrontUser::factory()->create(['isAdmin' => false]);

        $email = $user->getAttribute('email');

        $this->socialNetworkUser->method('getId')->willReturn(
            $socialNetworkUserId
        );

        $this->socialNetworkUser->method('getEmail')->willReturn($email);
        $this->socialNetworkUser->method('getNickname')->willReturn($this->faker->name);

        $this->socialNetworkAuthService->login(
            $this->socialNetworkUser,
            $this->socialNetworkType->getAttribute('id')
        );

        $socialAccount = SocialAccount::query()
            ->where('socialNetworkUserId', '=', $socialNetworkUserId)
            ->first();

        $this->assertEquals($socialAccount->getAttribute('userId'), $user->getAttribute('id'));
    }

   
    public function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
